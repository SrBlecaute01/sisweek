name: Deploy

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Run release please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: simple
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ needs.release.outputs.release_created }}
    environment:
      name: production
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_SERVICE_NAME }}:${{ needs.release.outputs.tag_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_SERVICE_NAME }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_SERVICE_NAME }}:latest
          cache-to: type=inline

  deploy:
    runs-on: ubuntu-latest
    needs: [release, build-and-push-docker-image]
    if: ${{ needs.release.outputs.release_created }}
    environment:
      name: production
    steps:
      - name: Deploy via Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            NETWORK_NAME="${{ vars.DOCKER_NETWORK_NAME }}"
            SERVICE_NAME="${{ vars.DOCKER_SERVICE_NAME }}"
            
            IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_SERVICE_NAME }}:latest"
            
            echo "Starting deployment of ${IMAGE_NAME} on network ${NETWORK_NAME}"
            echo "Pulling latest image..."
            docker pull ${IMAGE_NAME}
            
            echo "Stopping and removing the old service container"
            docker stop ${SERVICE_NAME} || true
            docker rm ${SERVICE_NAME} || true
            
            echo "Running new container ${SERVICE_NAME}..."
            docker run -d \
            --name ${SERVICE_NAME} \
            --restart unless-stopped \
            --network ${NETWORK_NAME} \
            ${IMAGE_NAME}
            
            echo "Cleaning up unused Docker images..."
            docker image prune -f
            
            echo "Deployment completed successfully!"